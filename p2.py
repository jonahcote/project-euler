# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

def main():
    # stop when values in sequence are <= n
    n = 4000000
    # account for starting hard-coded 1, 1
    n -= 2
    # return the result
    print(fibonacci(n))

# generate a fibonacci sequence
def fibonacci(n):
    # start with 1, 1
    fib = [1, 1]
    # initialize values
    evenSum = 0
    next = 0
    # repeat until top value is matched or exceeded
    while next <= n:
        # find the value back two
        backtwo = fib[len(fib)-2]
        # find the value back one
        backone = fib[len(fib)-1]
        # sum those values to create the next value
        next = backtwo + backone
        # append that value to the end of the list
        fib.append(next)
        # check if value is even, if so add to running sum
        if next % 2 == 0:
            evenSum += next
    
    # return sum of even values
    return evenSum

# call main
main()